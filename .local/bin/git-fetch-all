#!/usr/bin/env bash
# Auto git fetch for my git dirs

export GIT_CONFIG_DIR="$HOME/.config/git"
source $GIT_CONFIG_DIR/working_dirs

function get_dirs ()
{
  # Array to store available dirs
  declare -a arr
  i=0

  # Place dir's name into the array
  dir_list=$(find $1 -mindepth 1 -maxdepth 1 -type d 2> /dev/null)
  for dir in $dir_list
  do
    dir_name=$(basename $dir)
    if ! grep -qs "$dir_name" <<< $2; then
      arr[$i]=$dir
      let "i+=1"
    fi
  done

  echo "${arr[@]}"
}

function update_git_repo ()
{
  # if ( git --git-dir=$1 rev-parse --is-bare-repository &> /dev/null ) || ( git --git-dir=$1 rev-parse --is-inside-work-tree &> /dev/null ); then
    # git -C $1 fetch --all 2> /dev/null

  # Is it a git bare repo
  if git --git-dir=$1 rev-parse --is-bare-repository &> /dev/null; then
    git --git-dir=$1 fetch --all &> /dev/null
  # Is it a git repo
  elif git -C $1 rev-parse --is-inside-work-tree &> /dev/null; then
    git -C $1 fetch --all &> /dev/null
  # It is an ordinary dir
  else
    echo $1
  fi
}

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-p] [-g]
Script description here.
Available options:
-h, --help          Print this help and exit
-o, --only-success  Set true or false to display only succesful git update
EOF
  exit
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

parse_params() {
  # default values of variables set from params
  MY_PATH="$HOME"
  ONLY_SUCCESS="false"

  while test $# -gt 0; do
    case $1 in
    -h | --help) usage ;;
    -o | --only-success)
      shift
      ONLY_SUCCESS="true"
      ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  return 0
}

setup_colors

parse_params "$@"

# Convert result to array
dir_arr=($(get_dirs $GIT_DIRS $GIT_IGNORE_DIRS))
dir_arr_size=$(echo "${dir_arr[@]}" | wc -w)

# Update all possible git directories in the given GIT DIRS
# declare -a sub_arr
i=0
let "dir_arr_size-=1"
for j in $(seq 0 $dir_arr_size)
do
  # echo ${dir_arr[$j]}
  result=$(update_git_repo "${dir_arr[$j]}")
  if [[ -z $result && $? ]]; then
    echo -e $GREEN"Successfully update\t"$YELLOW"$(basename ${dir_arr[$j]})"$NOFORMAT
  else
    if [[ $ONLY_SUCCESS == "false" ]]; then
      echo -e $RED"Failed to update\t"$YELLOW"$(basename ${dir_arr[$j]})"$NOFORMAT
    fi
  fi

  # if [[ -z $result ]]; then
    # sub_arr[$i]=$result
    # sub_arr[$i]="${dir_arr[$j]}"
    # echo "${sub_arr[$i]}"
    # let "i+=1"
  # fi
done

# TODO
# Update deeper within the given git directories
